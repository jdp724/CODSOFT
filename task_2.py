# -*- coding: utf-8 -*-
"""Task-2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KysAe4RCcircrT8OMaCNp5rWx-QamQxR
"""

from google.colab import files
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
from sklearn.model_selection import cross_val_score


# Upload the file
uploaded = files.upload()

# Load the dataset into a DataFrame, handling potential parser errors
file_name = list(uploaded.keys())[0]  # Get the uploaded file name
try:
    df = pd.read_csv(file_name)
except pd.errors.ParserError:
    print("Parser error encountered. Trying with different parameters.")
    try:
        df = pd.read_csv(file_name, delimiter=',', encoding='latin1', on_bad_lines='skip')
    except Exception as e:
        print(f"Failed to load the dataset. Error: {e}")
        raise

# Prepare and Split the Data
X = df.drop('species', axis=1)
y = df['species']

# Encode the labels
label_encoder = LabelEncoder()
y = label_encoder.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the Model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Evaluate the Model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print('Classification Report:')
print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))
cv_scores = cross_val_score(model, X, y, cv=5)

print(f'Cross-Validation Scores: {cv_scores}')
print(f'Mean CV Accuracy: {cv_scores.mean():.2f}')